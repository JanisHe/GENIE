## Processing
n_ver_load: 1
n_step_load: 20000
n_save_ver: 1
n_ver_picks: 1

template_ver: 1
vel_model_ver: 1
process_days_ver: 1 
## Put the list of days you want to process in file process_days_list_ver_%d.txt

offset_increment: 500
n_rand_query: 112000
n_query_grid: 5000

thresh: 0.2 # Threshold to declare detection
thresh_assoc: 0.2 # Threshold to declare src-arrival association
spr: 1 # Sampling rate to save temporal predictions
tc_win: 5.0 # Temporal window (s) to link events in Local Marching
sp_win: 15000.0 # Distance (m) to link events in Local Marching. Generally both of these on the order of training kernel sizes
break_win: 15.0 # Temporal window to find disjoint groups of sources, 
## so can run Local Marching without memory issues.
spr_picks: 100 # Assumed sampling rate of picks 
## (can be 1 if absolute times are used for pick time values)

d_win: 0.25 ## Lat and lon window to re-locate initial source detetections with refined sampling over
d_win_depth: 10000.0 ## Depth window to re-locate initial source detetections with refined sampling over
dx_depth: 50.0 ## Depth resolution to locate events with travel time based re-location

step: 2.0
step_abs: 1.0

cost_value: 3.0 # If use expanded competitve assignment, then this is the fixed cost applied per source
## when optimizing joint source-arrival assignments between nearby sources. The value is in terms of the 
## `sum' over the predicted source-arrival assignment for each pick. Ideally could make this number more
## adpative, potentially with number of stations or number of possible observing picks for each event. 

device: 'cpu' ## Right now, this isn't updated to work with cuda, since
## the necessary variables do not have .to(device) at the right places

compute_magnitudes: False # Uses local magnitude and will be un-calibrated by default, or can calibrate for a particular study site

process_known_events: False ## Only process times of known events in a reference catalog (default is USGS)
use_expanded_competitive_assignment: True
use_differential_evolution_location: True # otherwise use particle swarm to locate, which tends to converge less well (especially in depth)
